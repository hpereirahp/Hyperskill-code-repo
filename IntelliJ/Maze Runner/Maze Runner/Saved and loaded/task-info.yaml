type: edu
custom_name: stage3
files:
- name: src/maze/Main.java
  visible: true
  text: |
    package maze;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/MazeRunnerTest.java
  visible: false
  text: |
    import maze.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;

    enum Elem {
        WALL, EMPTY, PATH, DUMMY;

        static Elem get(char c) {
            if (c == '\u2588') {
                return WALL;
            } else if (c == ' ') {
                return EMPTY;
            } else if (c == '/') {
                return PATH;
            } else {
                return null;
            }
        }
    }

    class Maze {

        // maze[height][width]
        // maze[row][col]
        Elem[][] maze;

        Maze(Maze other) {
            maze = new Elem[other.getHeight()][other.getWidth()];
            for (int h = 0; h < other.getHeight(); h++) {
                for (int w = 0; w < other.getWidth(); w++) {
                    maze[h][w] = other.maze[h][w];
                }
            }
        }

        Maze(List<String> lines) throws Exception {

            int lineCount = 1;
            for (String line : lines) {
                if (line.length() % 2 != 0) {
                    throw new Exception("Line " + lineCount + " of the maze " +
                        "contains odd number of characters. Should be always even.");
                }

                for (char c : line.toCharArray()) {
                    if (Elem.get(c) == null) {
                        String hex = Integer.toHexString((int)c);
                        throw new Exception(
                            "Found strange symbol in the " + lineCount +
                                " line of the maze: \\u" + hex);
                    }
                }

                int lineWidth = line.length() / 2;

                for (int currWidth = 0; currWidth < lineWidth; currWidth++) {
                    int currIndex = currWidth * 2;
                    int nextIndex = currIndex + 1;

                    char currChar = line.charAt(currIndex);
                    char nextChar = line.charAt(nextIndex);

                    if (currChar != nextChar) {
                        throw new Exception("There are symbols in " +
                            "this line that don't appear twice in a row " +
                            "(at indexes " + currIndex + " and " + nextIndex + ").\n" +
                            "Line: \"" + line + "\"");
                    }
                }

                lineCount++;
            }

            int mazeWidth = lines.get(0).length() / 2;
            int mazeHeight = lines.size();

            lineCount = 1;
            for (String line : lines) {
                if (line.length() / 2 != mazeWidth) {
                    throw new Exception("The first line of the maze contains " +
                        lines.get(0).length() + " characters, but the line #" +
                        lineCount + " contains " + line.length() + " characters.");
                }
                lineCount++;
            }

            maze = new Elem[mazeHeight][mazeWidth];

            for (int currHeight = 0; currHeight < mazeHeight; currHeight++) {
                String line = lines.get(currHeight);
                for (int currWidth = 0; currWidth < mazeWidth; currWidth++) {
                    char c = line.charAt(currWidth * 2);
                    maze[currHeight][currWidth] = Elem.get(c);
                }
            }

            if (maze[0][0] != Elem.WALL ||
                maze[0][mazeWidth - 1] != Elem.WALL ||
                maze[mazeHeight - 1][0] != Elem.WALL ||
                maze[mazeHeight - 1][mazeWidth - 1] != Elem.WALL) {
                throw new Exception("All four corners of the maze must be walls.");
            }

            for (int h = 0; h <= mazeHeight - 3; h++) {
                for (int w = 0; w <= mazeWidth - 3; w++) {
                    if (getElem(h, w) == Elem.WALL &&
                        getElem(h, w + 1) == Elem.WALL &&
                        getElem(h, w + 2) == Elem.WALL &&

                        getElem(h + 1, w) == Elem.WALL &&
                        getElem(h + 1, w + 1) == Elem.WALL &&
                        getElem(h + 1, w + 2) == Elem.WALL &&

                        getElem(h + 2, w) == Elem.WALL &&
                        getElem(h + 2, w + 1) == Elem.WALL &&
                        getElem(h + 2, w + 2) == Elem.WALL) {

                        throw new Exception("There are 3x3 block in the maze " +
                            "consisting only of walls. Such blocks are not allowed.");
                    }
                }
            }
        }

        Elem[] getRow(int rowNum) {
            Elem[] newRow = new Elem[getWidth()];
            for (int i = 0; i < getWidth(); i++) {
                newRow[i] = maze[rowNum][i];
            }
            return newRow;
        }

        Elem[] getCol(int colNum) {
            Elem[] newCol = new Elem[getHeight()];
            for (int i = 0; i < getHeight(); i++) {
                newCol[i] = maze[i][colNum];
            }
            return newCol;
        }

        Elem getElem(int height, int width) {
            return maze[height][width];
        }

        void setElem(int height, int width, Elem elem) {
            maze[height][width] = elem;
        }

        int getWidth() {
            return maze[0].length;
        }

        int getHeight() {
            return maze.length;
        }

        Maze copy() {
            return new Maze(this);
        }

        int count(Elem toCount) {
            int sum = 0;
            for (Elem[] row : maze) {
                for (Elem e : row) {
                    if (e == toCount) {
                        sum++;
                    }
                }
            }
            return sum;
        }

        int countAround(int h, int w, Elem elem) {
            int sum = 0;

            if (h + 1 < getHeight() &&
                getElem(h + 1, w) == elem) {
                sum++;
            }

            if (h - 1 >= 0 &&
                getElem(h - 1, w) == elem) {
                sum++;
            }

            if (w + 1 < getWidth() &&
                getElem(h, w + 1) == elem) {
                sum++;
            }

            if (w - 1 >= 0 &&
                getElem(h, w - 1) == elem) {
                sum++;
            }

            return sum;
        }

        int countEntrances() {
            int entranceCount = 0;
            for (Elem[] line : new Elem[][] {
                getCol(0),
                getCol(getWidth() - 1),
                getRow(0),
                getRow(getHeight() - 1)
            }) {

                for (Elem e : line) {
                    if (e != Elem.WALL) {
                        entranceCount++;
                    }
                }
            }
            return entranceCount;
        }

        private void propagate(Elem from, Elem to) {
            boolean didPropagate = true;
            while (didPropagate) {
                didPropagate = false;
                for (int h = 0; h < getHeight(); h++) {
                    for (int w = 0; w < getWidth(); w++) {
                        if (getElem(h, w) == from) {
                            if (countAround(h, w, to) > 0) {
                                didPropagate = true;
                                setElem(h, w, to);
                            }
                        }
                    }
                }
            }
        }

        int checkAccessibility() {
            int entranceHeight = 0;
            int entranceWidth = 0;

            findPoints: {
                for (int currWidth : new int[] {0, getWidth() - 1}) {
                    for (int currHeight = 0; currHeight < getHeight(); currHeight++) {
                        if (getElem(currHeight, currWidth) != Elem.WALL) {
                            entranceHeight = currHeight;
                            entranceWidth = currWidth;
                            break findPoints;
                        }
                    }
                }

                for (int currHeight : new int[] {0, getHeight() - 1}) {
                    for (int currWidth = 0; currWidth < getWidth(); currWidth++) {
                        if (getElem(currHeight, currWidth) != Elem.WALL) {
                            entranceHeight = currHeight;
                            entranceWidth = currWidth;
                            break findPoints;
                        }
                    }
                }
            }

            Maze copy = copy();
            copy.setElem(entranceHeight, entranceWidth, Elem.PATH);
            copy.propagate(Elem.EMPTY, Elem.PATH);

            return copy.count(Elem.EMPTY);
        }

        int checkPath() throws Exception {
            int entranceHeight = 0;
            int entranceWidth = 0;

            for (int currWidth : new int[] {0, getWidth() - 1}) {
                for (int currHeight = 0; currHeight < getHeight(); currHeight++) {
                    if (getElem(currHeight, currWidth) == Elem.EMPTY) {
                        throw new Exception("If the maze is solved all " +
                            "the entrances should be marked with '//' characters");
                    }
                    if (getElem(currHeight, currWidth) == Elem.PATH) {
                        entranceHeight = currHeight;
                        entranceWidth = currWidth;
                    }
                }
            }

            for (int currHeight : new int[] {0, getHeight() - 1}) {
                for (int currWidth = 0; currWidth < getWidth(); currWidth++) {
                    if (getElem(currHeight, currWidth) == Elem.EMPTY) {
                        throw new Exception("If the maze is solved all " +
                            "the entrances should be marked with '//' characters");
                    }
                    if (getElem(currHeight, currWidth) == Elem.PATH) {
                        entranceHeight = currHeight;
                        entranceWidth = currWidth;
                    }
                }
            }

            for (int h = 0; h < getHeight(); h++) {
                for (int w = 0; w < getWidth(); w++) {
                    if (getElem(h, w) == Elem.PATH) {
                        if (countAround(h, w, Elem.PATH) >= 3) {
                            throw new Exception("The escape path shouldn't branch off, " +
                                "it should go in one direction.");
                        }
                    }
                }
            }

            Maze copy = copy();
            copy.setElem(entranceHeight, entranceWidth, Elem.DUMMY);
            copy.propagate(Elem.PATH, Elem.DUMMY);

            return copy.count(Elem.PATH);
        }

        boolean equals(Maze other) {
            if (getWidth() != other.getWidth() || getHeight() != other.getHeight()) {
                return false;
            }
            for (int h = 0; h < getHeight(); h++) {
                for (int w = 0; w < getWidth(); w++) {
                    if (getElem(h, w) == Elem.WALL && other.getElem(h, w) != Elem.WALL ||
                        getElem(h, w) != Elem.WALL && other.getElem(h, w) == Elem.WALL) {
                        return false;
                    }
                }
            }
            return true;
        }

        static List<Maze> parse(String text) throws Exception {

            List<Maze> mazes = new ArrayList<>();

            List<String> lines = text
                .lines()
                .collect(Collectors.toList());

            lines.add("");

            List<String> mazeLines = new ArrayList<>();

            boolean isStarted = false;
            for (String line : lines) {
                if (line.contains("\u2588")) {
                    isStarted = true;
                    mazeLines.add(line);
                } else if (isStarted) {
                    isStarted = false;
                    Maze maze = new Maze(mazeLines);
                    mazes.add(maze);
                    mazeLines.clear();
                }
            }

            return mazes;
        }

    }

    class Clue {
        int size;
        Clue(int s) {
            size = s;
        }
    }

    public class MazeRunnerTest extends StageTest<Clue> {

        public MazeRunnerTest() {
            super(Main.class);
        }

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<Clue>()
                    .setInput("0"),

                new TestCase<Clue>()
                    .setInput("1\n17\n0")
                    .setAttach(new Clue(17)),

                new TestCase<Clue>()
                    .setInput("1\n15\n3\ntest_maze.txt\n0")
                    .setAttach(new Clue(15)),

                new TestCase<Clue>()
                    .setInput("2\ntest_maze.txt\n4\n0")
                    .setAttach(new Clue(15))
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            List<Maze> mazes;
            try {
                mazes = Maze.parse(reply);
            } catch (Exception e) {
                return CheckResult.wrong(
                    e.getMessage()
                );
            }

            if (clue == null && mazes.size() == 0) {
                return CheckResult.correct();
            } else if (clue == null) {
                return CheckResult.wrong(
                    "In this test no maze should be shown, but one was shown. " +
                        "Try to use \\u2588 character only to print the maze."
                );
            } else if (mazes.size() == 0) {
                return CheckResult.wrong(
                    "No mazes found in the output. Check if you are using " +
                        "\\u2588 character to print the maze."
                );
            }

            if (mazes.size() > 1) {
                return CheckResult.wrong(
                    "Found " + mazes.size() + " mazes in the output. " +
                        "Should be only one maze."
                );
            }

            Maze maze = mazes.get(0);

            int entrances = maze.countEntrances();
            if (entrances != 2) {
                return new CheckResult(false,
                    "There are " + entrances + " entrances to the maze, " +
                        "should be only two.");
            }

            int emptyLeft = maze.checkAccessibility();
            if (emptyLeft > 0) {
                return new CheckResult(false,
                    "There are " + emptyLeft + " empty " +
                        "cells that are inaccessible from the entrance of the maze " +
                        "(or there is no way from the entrance to the exit)."
                );
            }

            if (maze.getHeight() != clue.size) {
                return new CheckResult(false,
                    "Number of rows in the maze is incorrect. " +
                        "It's " + maze.getHeight() + ", but should be " + clue.size);
            }

            if (maze.getWidth() != clue.size) {
                return new CheckResult(false,
                    "Number of columns in the maze is incorrect. " +
                        "It's " + maze.getWidth() + ", but should be " + clue.size);
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/maze/Edge.java
  visible: true
  text: |
    package maze;

    import org.jetbrains.annotations.NotNull;

    import java.util.Random;

    public class Edge implements Comparable<Edge> {

        private int value;
        private Node from;
        private Node to;

        public Edge(Node from, Node to) {
            this.value = new Random().nextInt(5);
            this.from = from;
            this.to = to;
        }

        public int getValue() {
            return value;
        }

        @Override
        public int compareTo(@NotNull Edge edge) {
            if (this.value == edge.value) {
                int compareNode = this.from.compareTo(edge.from);
                if (compareNode != 0) {
                    return compareNode;
                }
                return this.to.compareTo(edge.to);
            } else if (this.value > edge.value) {
                return 1;
            } else {
                return -1;
            }
        }
    }
  learner_created: true
- name: src/maze/MinimumSpanningTree.java
  visible: true
  text: |
    package maze;

    import java.util.List;

    /**
     * https://www.geeksforgeeks.org/prims-minimum-spanning-tree-mst-greedy-algo-5/
     */
    public class MinimumSpanningTree {

        private static int minKey(int[] key, boolean[] mstSet) {

            int min = Integer.MAX_VALUE;
            int min_index = -1;

            for (int i = 0; i < key.length; i++) {
                if (!mstSet[i] && key[i] < min) {
                    min = key[i];
                    min_index = i;
                }
            }

            return min_index;
        }

        public static int[] primMST(int[][] matrix) {
            int[] parent = new int[matrix.length];
            int[] key = new int[matrix.length];
            boolean[] mstSet = new boolean[matrix.length];

            for (int i = 0; i < matrix.length; i++) {
                key[i] = Integer.MAX_VALUE;
                mstSet[i] = false;
            }

            key[0] = 0;
            parent[0] = -1;

            for (int i = 0; i < matrix.length - 1; i++) {

                int u = minKey(key, mstSet);

                mstSet[u] = true;

                for (int j = 0; j < matrix.length; j++) {
                    if (matrix[u][j] != 0 && !mstSet[j] && matrix[u][j] < key[j]) {
                        parent[j] = u;
                        key[j] = matrix[u][j];
                    }
                }
            }

            return parent;
        }
    }
  learner_created: true
- name: src/maze/Maze.java
  visible: true
  text: |
    package maze;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;
    import java.util.Random;

    public class Maze {

        private int rows;
        private int columns;
        private int graphHeight;
        private int graphWidth;
        private int[][] matrix;
        private int[] tree;
        private String[][] maze;

        private static final String FREE = "  ";
        private static final String WALL = "\u2588\u2588";
        private static final Random RANDOM = new Random();

        public Maze(int rows, int columns) {
            this.rows = rows;
            this.columns = columns;
            this.graphHeight = (rows - 1) / 2;
            this.graphWidth = (columns - 1) / 2;
            int size = graphHeight * graphWidth;
            this.matrix = new int[size][size];
            this.maze = new String[rows][columns];
        }

        public void build() {

            int value;
            for (int i = 0; i < matrix.length; i++) {

                if (i % graphWidth != graphWidth - 1) {
                    value = RANDOM.nextInt(6) + 1;
                    matrix[i][i + 1] = value;
                    matrix[i + 1][i] = value;
                }

                if (i / graphWidth != graphHeight - 1) {
                    value = RANDOM.nextInt(6) + 1;
                    matrix[i][i + graphWidth] = value;
                    matrix[i + graphWidth][i] = value;
                }
            }

            tree = MinimumSpanningTree.primMST(matrix);


            // set entry and exit
            int entry = RANDOM.nextInt(graphHeight) * 2 + 1;
            int exit = RANDOM.nextInt(graphHeight) * 2 + 1;
            while (entry == exit) {
                exit = RANDOM.nextInt(graphHeight) * 2 + 1;
            }
            maze[entry][0] = FREE;
            maze[exit][columns - 1] = FREE;

            int currentNode = 0;
            for (int i = 1; i < rows - 1; i = i + 2) {

                for (int j = 1; j < columns; j = j + 2) {
                    maze[i][j] = FREE;
                    if (findLeftEdge(currentNode)) {
                        maze[i][j + 1] = FREE;
                    }
                    if (findBottomEdge(currentNode)) {
                        maze[i + 1][j] = FREE;
                    }
                    currentNode++;
                }
            }

            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < columns; j++) {
                    if (maze[i][j] == null) {
                        maze[i][j] = WALL;
                    }
                }
            }
        }

        private boolean findLeftEdge(int currentNode) {
            for (int i = 0; i < tree.length; i++) {
                if ((tree[i] == currentNode && i == currentNode + 1) ||
                        (i == currentNode && tree[i] == currentNode + 1)) {
                    return true;
                }
            }
            return false;
        }

        private boolean findBottomEdge(int currentNode) {
            for (int i = 0; i < tree.length; i++) {
                if ((tree[i] == currentNode && i == currentNode + graphWidth) ||
                        (i == currentNode && tree[i] == currentNode + graphWidth)) {
                    return true;
                }
            }
            return false;
        }

        public void print() {

    //        Arrays.stream(matrix)
    //                .map(Arrays::toString)
    //                .forEach(System.out::println);
    //
    //        System.out.println();
    //        System.out.println("Edge \tWeight");
    //        for (int i = 1; i < matrix.length; i++) {
    //            System.out.println(tree[i] + " - " + i + "\t" + matrix[i][tree[i]]);
    //        }
    //
    //        System.out.println();

            Arrays.stream(maze)
                    .map(elem -> String.join("", elem))
                    .forEach(System.out::println);

        }
    }
  learner_created: true
- name: src/maze/Node.java
  visible: true
  text: |
    package maze;

    import org.jetbrains.annotations.NotNull;

    public class Node implements Comparable<Node> {

        private int row;
        private int column;

        public Node(int row, int column) {
            this.row = row;
            this.column = column;
        }

        @Override
        public int compareTo(@NotNull Node node) {
            if (this.row == node.row) {
                if (this.column == node.column) {
                    return 0;
                } else if (this.column > node.column) {
                    return 1;
                } else {
                    return -1;
                }
            } else if (this.row > node.row) {
                return 1;
            } else {
                return -1;
            }
        }
    }
  learner_created: true
- name: src/maze/MazeRunner.java
  visible: true
  learner_created: true
- name: src/maze/SerializationUtils.java
  visible: true
  learner_created: true
- name: test_maze.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/47/stages/253/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/47/stages/253/implement">JetBrains
    Academy</a>
  time: Tue, 08 Sep 2020 21:54:02 UTC
record: 3
